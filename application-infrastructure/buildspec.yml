version: 0.2

# Many BUILD ENVIRONMENT VARIABLES are specified in the template-pipeline.yml template.
# Search for 'EnvironmentVariables' under AWS::CodeBuild::Project in the template.
# 
# You can also run the command `printenv`

phases:
  install:
    runtime-versions:
      nodejs: latest
    commands:
      
      - ls -l -a

      - python --version
      - echo "NODE_ENV is $NODE_ENV"

      # Configure pip cache directory
      - mkdir -p /root/.cache/pip
      - pip config set global.cache-dir /root/.cache/pip

      # Upgrade AWS CLI to the latest version
      - pip install --upgrade awscli

      # Install Python dependencies for Build Scripts if requirements.txt exists
      - |
        if [ -f "build-scripts/requirements.txt" ]; then
          echo "Installing Python dependencies for build scripts"
          pip install -r build-scripts/requirements.txt
        else
          echo "No build-scripts/requirements.txt found, skipping pip install"
        fi

  pre_build:
    commands:
      
      # Install Python dependencies for Application if requirements.txt exists
      - |
        if [ -f "application-infrastructure/src/requirements.txt" ]; then
          echo "Installing Python dependencies for build scripts"
          pip install -r application-infrastructure/src/requirements.txt
        else
          echo "No application-infrastructure/src/requirements.txt found, skipping pip install"
        fi
            
  build:
    commands:

      - cd application-infrastructure

      # There is sometimes a bug that causes the alias to not be updated correctly (see comment in template.yml for AppFunction.Properties.AutoPublishCodeSha256)
      - python3 ./build-scripts/update_template_timestamp.py template.yml

      # Use CloudFormation to package the application infrastructure and code that was placed in the S3 Artifacts Bucket (usually something like `cf-artifacts-<region>-<account-id>` or `cf-templates-randomchars-<region>`).
      - aws cloudformation package --template template.yml --s3-bucket $S3_ARTIFACTS_BUCKET --output-template template-export.yml

      # Do a search/replace using the linux sed command in the template-configuration.json file so AWS CloudFormation can tag project resources.
      - sed -i.bak 's|\$AWS_PARTITION\$|'${AWS_PARTITION}'|g;s|\$AWS_REGION\$|'${AWS_REGION}'|g;s|\$AWS_ACCOUNT\$|'${AWS_ACCOUNT}'|g;s|\$PREFIX\$|'${PREFIX}'|g;s|\$PROJECT_ID\$|'${PROJECT_ID}'|g;s|\$STAGE_ID\$|'${STAGE_ID}'|g;s|\$REPOSITORY\$|'${REPOSITORY}'|g;s|\$REPOSITORY_BRANCH\$|'${REPOSITORY_BRANCH}'|g;s|\$DEPLOY_ENVIRONMENT\$|'${DEPLOY_ENVIRONMENT}'|g;s|\$ALARM_NOTIFICATION_EMAIL\$|'${ALARM_NOTIFICATION_EMAIL}'|g;s|\$PARAM_STORE_HIERARCHY\$|'${PARAM_STORE_HIERARCHY}'|g' template-configuration.json

      # list files in the artifacts
      - ls -l -a

artifacts:
  files:
    - 'application-infrastructure/**/*'

# add cache
cache:
  paths:
    - '/root/.cache/pip/**/*'